import os
import logging
from flask import request
import requests
import datetime
import pandas as pd
import json


LOG_DIR = "/data/logs/ffa94a6ffa1846fc/"
LOG_FILE = os.path.join(LOG_DIR, "workflow.log")
os.makedirs(LOG_DIR, exist_ok=True)
output_path = "/data/output/ffa94a6ffa1846fc/"
os.makedirs(output_path, exist_ok=True)
logging.basicConfig(filename=LOG_FILE, filemode="a", format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# Create a file handler
file_handler = logging.FileHandler(LOG_FILE, mode = 'a')
file_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))

# Create a logger
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)

def main():
    logger.info("***************Workflow code is triggered***************")
    data = request.get_json(force=True)
    logger.info("request data: %s", data)
    
    input_path = "/data/input_final"
    evidence_path = "/data/Evidence_Documents"    
    audit_results_path = "/data/Audit_Samples"

    # Agent 1: processing input files agent
    logger.info("Calling processing input files agent")
    agent1_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-1"
    agent1_request_data = {"input_path" : input_path}
    agent1_response = requests.post(agent1_url, json=agent1_request_data)
    agent1_response_data = agent1_response.json()
    logger.info("Finished Calling processing input files agent")
    
    if agent1_response_data.get("status") != "success":
        return {
            "status": "failed",
            "message": "Reader Agent failed"
        }
    companies_requiring_audit = agent1_response_data.get("companies_requiring_audit_dictionary", [])
    companies_and_requirements = agent1_response_data.get("companies_and_requirements", [])
    companies_and_poc = agent1_response_data.get("companies_and_poc", [])                                             
    companies_iq_control = agent1_response_data.get("companies_iq_control", [])
    
    output_file_path = os.path.join(output_path, "companies_and_requirements.json")
    with open(output_file_path, "w") as f:
        json.dump(companies_and_requirements, f, indent = 4)
        
    output_file_path = os.path.join(output_path, "companies_and_poc.json")
    with open(output_file_path, "w") as f:
        json.dump(companies_and_poc, f, indent = 4)
        
    output_file_path = os.path.join(output_path, "companies_iq_control.json")
    with open(output_file_path, "w") as f:
        json.dump(companies_iq_control, f, indent = 4)

    # Agent 2: Evidence Document Gatherer
    logger.info("Calling Evidence Document Gatherer")
    agent2_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-2"
    agent2_request_data = {"evidence_path" : evidence_path}
    agent2_response = requests.post(agent2_url, json=agent2_request_data)
    agent2_response_data = agent2_response.json()
    logger.info("Finished Calling Evidence Document Gatherer")
    
    if agent2_response_data.get("status") != "success":
        return {
            "status": "failed",
            "message": "Calling Evidence Reader Agent"
        }
        
    evidence_docs = agent2_response_data.get("evidence_docs", [])
    
    output_file_path = os.path.join(output_path, "evidence_docs.json")
    with open(output_file_path, "w") as f:
        json.dump(evidence_docs, f, indent = 4)

    # Agent 3: Checklist Agent
    logger.info("Calling Checklist Agent")
    agent3_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-4"
    agent3_response = requests.post(agent3_url)
    agent3_response_data = agent3_response.json()
    logger.info("Finished Calling Token Agent")
    
    if agent3_response_data.get("status") != "success":
        return {
            "status": "failed",
            "message": "Token Puller Agent failed"
        }    
    
    token = agent3_response_data.get("token", [])


    # Agent 4: Checklist Pull Agent
    logger.info("Calling Checklist Pull Agent")
    agent4_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-5"
    agent4_request_data = {
        "token": token,
        "companies_and_requirements" : companies_and_requirements
    }
    agent4_response = requests.post(agent4_url, json=agent4_request_data)
    agent4_response_data = agent4_response.json()
    logger.info("Finished Calling Checklist Pull agent")
    
    if agent4_response_data.get("status") != "success":
        return {
            "status": "failed",
            "message": "API Puller Agent failed"
        }
    checklist = agent4_response_data.get("checklist",[])
    
    output_file_path = os.path.join(output_path, "checklist.json")
    with open(output_file_path, "w") as f:
        json.dump(checklist, f, indent = 4)

    # Agent 5: Data Formatter
    logger.info("Calling Data Formatter")
    agent5_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-6"
    agent5_request_data = {
        "checklist": checklist,
        "companies_and_requirements": companies_and_requirements
    }
    agent5_response = requests.post(agent5_url, json = agent5_request_data)
    agent5_response_data = agent5_response.json()
    logger.info("Finished Calling Data Formatter")
    
    if agent5_response_data.get("status") != "success":
        return {
            "status": "failed",
            "message": "Format data agent failed"
        }   
    
    companies_regulations_and_requirements = agent5_response_data.get("companies_regulations_and_requirements")

    output_file_path = os.path.join(output_path, "companies_regulations_and_requirements.json")
    with open(output_file_path, "w") as f:
        json.dump(companies_regulations_and_requirements, f, indent = 4)

    # Agent 6: Determine evidence document (cognitive)
    logger.info("Calling Determine evidence document")
    agent6_url = "http://router.accure-momentum.svc.cluster.local:80/cognitive_agent_runner"
    agent6_request_data = {
        "prompt": data.get("6_prompt", ""),
        "input_path": companies_regulations_and_requirements
    }
    agent6_response = requests.post(agent6_url, json=agent6_request_data)
    agent6_response_json = agent6_response.json()
    logger.info("Finished Calling Determine evidence document")
    
    selected_evidence_docs = agent6_response_json.get("response")
    
    output_file_path = os.path.join(output_path, "selected_evidence_docs.json")
    with open(output_file_path, "w") as f:
        json.dump(selected_evidence_docs, f, indent = 4)    

    # Agent 7: Prepping for API
    logger.info("Calling Prepping for API")
    agent7_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-8"
    agent7_request_data = {"companies_iq_control" : companies_iq_control}
    agent7_response = requests.post(agent7_url, json=agent7_request_data)
    agent7_response_data = agent7_response.json()
    logger.info("Finished Calling Prepping for API")
    
    if agent7_response_data.get("status") != "success":
        return {
            "status": "failed",
            "message": "Make API Call Agent failed"
        }
        
    merged = agent7_response_data.get("merged")
    
    output_file_path = os.path.join(output_path, "merged_dictionary.json")
    with open(output_file_path, "w") as f:
        json.dump(merged, f, indent = 4)

    # Agent 8: Audit Starter - Waiting Until We Get API Access
#    logger.info("Calling Audit Starter")
#    agent8_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-9"
#    agent8_response = requests.post(agent8_url)
#    agent8_response_data = agent8_response.json()
#    logger.info("Finished Calling Audit Starter")
    
#    if agent8_response_data.get("status") != "success":
#        return {
#            "status": "failed",
#            "message": "Audit Starter agent failed"
#        }    
    
#    audit_results_hold = agent3_response_data.get("audit_results_hold", [])


    # Agent 9: Audit Results
    logger.info("Calling Audit Results")
    agent9_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-10"
    agent9_request_data = {"audit_results_path" : audit_results_path}
    agent9_response = requests.post(agent9_url, json=agent9_request_data)
    agent9_response_data = agent9_response.json()
    logger.info("Finished Calling Audit Results")

    audit_results = agent9_response_data.get("audit_results")
    
    output_file_path = os.path.join(output_path, "audit_results.json")
    with open(output_file_path, "w") as f:
        json.dump(audit_results, f, indent = 4)

    # Agent 10: Compliance Summarization (cognitive)
    logger.info("Calling Compliance Summarization")
    agent10_url = "http://router.accure-momentum.svc.cluster.local:80/cognitive_agent_runner"
    agent10_request_data = {
        "prompt": data.get("10_prompt", ""),
        "input_data": audit_results
    }
    agent10_response = requests.post(agent10_url, json=agent10_request_data)
    agent10_response_json = agent10_response.json()
    logger.info("Finished Calling Compliance Summarization")
    
    if agent10_response_json.get("status") != "success":
        return {
            "status": "failed",
            "message": "Compliance and Summarization Agent failed"
        }
        
    compliance_status = agent10_response_json.get("response")
    
    output_file_path = os.path.join(output_path, "compliance_status.json")
    with open(output_file_path, "w") as f:
        json.dump(compliance_status, f, indent = 4)

    # Agent 11: notification sender
    logger.info("Calling notification sender")
    agent11_url = "http://router.accure-momentum.svc.cluster.local:80/ffa94a6ffa1846fc-12"
    agent11_request_data = {
        "compliance_status" : compliance_status,
        "companies_and_poc" : companies_and_poc
    }
    agent11_response = requests.post(agent11_url, json=agent11_request_data)
    agent11_response_data = agent11_response.json()
    logger.info("Finished Calling notification sender")
    
    if agent11_response_data.get("status") != "success":
        return {
            "status": "failed",
            "message": "Email Summary Agent failed"
        }

    output = {
        "status": "success",
        "message": "Workflow completed"
    }
    return output
